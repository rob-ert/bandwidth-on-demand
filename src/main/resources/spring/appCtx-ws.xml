<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- The owner of the original code is SURFnet BV. Portions created by the original 
    owner are Copyright (C) 2011-2012 the original owner. All Rights Reserved. Portions 
    created by other contributors are Copyright (C) the contributor. All Rights Reserved. 
    Contributor(s): (Contributors insert name & email here) This file is part of the 
    SURFnet7 Bandwidth on Demand software. The SURFnet7 Bandwidth on Demand software 
    is free software: you can redistribute it and/or modify it under the terms of the 
    BSD license included with this distribution. If the BSD license cannot be found with 
    this distribution, it is available at the following location <http://www.opensource.org/licenses/BSD-3-Clause> -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:ws="http://jax-ws.dev.java.net/spring/core" xmlns:wss="http://jax-ws.dev.java.net/spring/servlet"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://jax-ws.dev.java.net/spring/core http://jax-ws.dev.java.net/spring/core.xsd
       http://jax-ws.dev.java.net/spring/servlet http://jax-ws.dev.java.net/spring/servlet.xsd">

    <!-- NSI WS -->
    <wss:binding url="/nsi/v1_sc/provider">
        <wss:service>
            <ws:service bean="#connectionServiceProviderWs_v1sc" />
        </wss:service>
    </wss:binding>

    <wss:binding url="${nsi.v2.service.url}">
        <wss:service>
            <ws:service bean="#connectionServiceProviderWs_v2">
                <ws:handlers>
                    <ref bean="updateNsiHeadersForAckHandler" />
                    <ref bean="connectionServiceProviderIdempotentMessageHandler" />
                    <ref bean="transactionSoapHandler" /> <!-- Must appear as last item to ensure transaction is started first! -->
                </ws:handlers>
            </ws:service>
        </wss:service>
    </wss:binding>

    <beans profile="onecontrol">
        <!--
        One day, you might think "I will inline the contents of that file that idiot is importing
        here, so I can eliminate the extra xml file". Don't. It will break the binding between jaxws and the spring-managed bean
        that does the actual handling of messages (NotificationConsumerHttp).
         -->
        <import resource="aapCtx-ws-onecontrol.xml"/>
    </beans>
</beans>
